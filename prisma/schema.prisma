generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  username       String
  email          String     @unique
  hashedPassword String
  addressLine1   String?
  addressLine2   String?
  addressLine3   String?
  city           String?
  postcode       String?
  province       String?
  country        String?
  department     Department @default(UNASSIGN)
  epfNo          String?
  fullname       String?
  icNo           String?
  phoneNo        String?

  role    Role    @default(STAFF)
  socsoNo String?

  session Session[]
  store   Store?
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Supplier {
  id           String    @id @default(cuid())
  supplierName String    @unique
  companyName  String?
  phone        String?
  email        String?
  addressLine1 String?
  addressLine2 String?
  addressLine3 String?
  postcode     String?
  city         String?
  province     String?
  country      String?
  products     Product[]
}

model Product {
  id                String    @id @default(cuid())
  sku               String?
  productCode       String    @unique
  description       String
  unitPrice         Float
  oum               String
  supplierId        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  supplier          Supplier? @relation(fields: [supplierId], references: [id])
  stocks            Stock[]
  brandName         String
  mdaRegistrationNo String?
  mdaPageNo         Int?
  mdaEffectiveDate  DateTime?
  mdaExpiryDate     DateTime?
}

model Store {
  id           String       @id @default(cuid())
  storeName    String       @unique
  addressLine1 String
  addressLine2 String
  addressLine3 String?
  postcode     String
  city         String
  province     String
  country      String
  userId       String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  storeStocks  StoreStock[]
}

model Stock {
  id              String       @id @default(cuid())
  lotNo           String?
  manufactureDate DateTime?
  expiredDate     DateTime?
  qty             Int
  productId       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  products        Product      @relation(fields: [productId], references: [id])
  storeStocks     StoreStock[]
}

model StoreStock {
  id      String @id @default(cuid())
  storeId String
  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id])
  store   Store  @relation(fields: [storeId], references: [id])

  @@unique([storeId, stockId])
}

model Customer {
  id                   String                 @id @default(cuid())
  title                String
  fullname             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  quotations           Quotation[]
  customerOrganization CustomerOrganization[] @relation("CustomerToCustomerOrganization")
}

model CustomerOrganization {
  id                String   @id @default(cuid())
  department        String[]
  organizationName  String   @unique
  organizationSSMNo String?  @unique
  organizationTINNo String?  @unique
  addressLine1      String
  addressLine2      String
  addressLine3      String?
  city              String
  province          String
  country           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  postcode          String

  customer Customer[] @relation("CustomerToCustomerOrganization")
}

enum QuoteType {
  ORIGINAL
  DUMMY
}

model Quotation {
  id         String          @id @default(cuid())
  agent      String
  quoteType  QuoteType
  quoteId    String          @unique
  date       DateTime        @default(now())
  customerId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  customer   Customer        @relation(fields: [customerId], references: [id])
  title      String
  items      QuotationItem[]
}

model QuotationItem {
  id          String    @id @default(cuid())
  sku         String?
  quotationId String
  productCode String
  description String
  unitPrice   Float
  oum         String
  qty         Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

enum Role {
  SUPERADMIN
  DIRECTOR
  MANAGER
  ADMIN
  STAFF
}

enum Department {
  UNASSIGN
  MANAGEMENT
  SALES
  MARKETING
  LOGISTIC
}
